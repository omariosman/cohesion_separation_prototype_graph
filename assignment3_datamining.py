# -*- coding: utf-8 -*-
"""Assignment3_DataMining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16hdK8Au3_YOOQxTuJDgwQeq_JByKYwXa
"""

import numpy as np 
import pandas as pd
from scipy.spatial.distance import cdist


mymatrix = np.loadtxt('k2')
mymatrix = mymatrix.transpose()

def cohesion_prototype_calculate(clusters_data, clusters_centroid):
  WSS = 0
  for i in range(len(clusters_data)):
    cluster_data = clusters_data[i]
    cluster_centroid = clusters_centroid[i]
    cluster_cohesion_prototype_based = 0
    for j in range(len(cluster_data)):
      instance_vector = cluster_data.iloc[j].to_numpy()
      dist = np.linalg.norm(instance_vector - cluster_centroid)
      cluster_cohesion_prototype_based += dist
    WSS += cluster_cohesion_prototype_based
  return WSS

def separation_prototype_calculate(k, m, cluster_mean_all):
  BSS = 0
  for i in range(k):
    centroid_numpy = cluster_mean_all[i]
    dist = np.linalg.norm(m - centroid_numpy)
    BSS = BSS + (k * dist)
  return BSS

def calculate_manhattan(v1, v2):
    if (len(v1) != len(v2)):
        raise Exception("The length is not equal")
    sum = 0
    for i in range(len(v1)):
        sum += abs(v1[i] - v2[i])
    return sum

def cohesion_graph(clusters_data):
  total_dist = 0
  for i in range(len(clusters_data)):
    cluster_data = clusters_data[i]
    dist_for_cluster = 0
    for j in range(len(cluster_data)):
      first_element = cluster_data.iloc[j].to_numpy()
      dist_for_one_element = 0
      for k in range(len(cluster_data)):
        second_element = cluster_data.iloc[k].to_numpy()
        dist_for_one_element += calculate_manhattan(first_element, second_element)
        #dist_for_one_element += cdist(first_element, second_element, metric='cityblock')
      dist_for_cluster += dist_for_one_element
      dist_for_cluster = dist_for_cluster / 2
    total_dist += dist_for_cluster
  return total_dist

def separation_graph(clusters_data):
  main_sum = 0
  for i in range(len(clusters_data)):
    cluster_data = clusters_data[i]
    for j in range(len(cluster_data)):
      instance = cluster_data.iloc[j]
      first = instance.to_numpy()
      for k in range(len(clusters_data)):
        if (k <= i):
          continue
        my_cluster = clusters_data[k]
        sum = 0
        for p in range(len(my_cluster)):
          second = my_cluster.iloc[p].to_numpy()
          sum += calculate_manhattan(first, second)
        main_sum += sum 
  return main_sum

#k=2
data = pd.read_csv("heart_failure_clinical_records_dataset_with_two_clusters.csv")
del data["DEATH_EVENT"]

cluster1_data = data[data["cluster"] == "cluster1"]
del cluster1_data["cluster"]

cluster2_data = data[data["cluster"] == "cluster2"]
del cluster2_data["cluster"]



k2_clusters_data = []
k2_clusters_data.append(cluster1_data)
k2_clusters_data.append(cluster2_data)

cluster1_mean_k2 = mymatrix[1]
cluster2_mean_k2 = mymatrix[2]

k2_clusters_centroid = []
k2_clusters_centroid.append(cluster1_mean_k2)
k2_clusters_centroid.append(cluster2_mean_k2)

#k2 cohesion prototype
k2_cohesion_prototype = cohesion_prototype_calculate(k2_clusters_data, k2_clusters_centroid)
print("k2 cohesion prototype: ", k2_cohesion_prototype)

#k2 cohesion graph
k2_cohesion_graph = cohesion_graph(k2_clusters_data)
print("k2 cohesion graph: ", k2_cohesion_graph)


#k2 separation protoype
k2_m_numpy = data.mean(axis=0).to_numpy()
k2_separtion_prototype = separation_prototype_calculate(2,  k2_m_numpy, k2_clusters_data)
print("k2 separation prototype:", k2_separtion_prototype)

#k2 separation graph
k2_separation_graph = separation_graph(k2_clusters_data)
print("k2 separation graph:", k2_separation_graph)

#k=3
data = pd.read_csv("heart_failure_clinical_records_dataset_with_three_clusters.csv")
del data["DEATH_EVENT"]

cluster1_data = data[data["cluster"] == "cluster1"]
del cluster1_data["cluster"]

cluster2_data = data[data["cluster"] == "cluster2"]
del cluster2_data["cluster"]

cluster3_data = data[data["cluster"] == "cluster3"]
del cluster3_data["cluster"]


k3_clusters_data = []
k3_clusters_data.append(cluster1_data)
k3_clusters_data.append(cluster2_data)
k3_clusters_data.append(cluster3_data)

cluster1_mean_k3 = [59.2124, 0.2743, 606.6283, 0.1062, 40.1504, 0.3363, 260462.7996, 1.1984, 137.3363, 0.8319, 0.531, 159.3894] 
cluster2_mean_k3 = [66.2851, 0.4096, 683.6265, 0.3253, 33.2289, 0.3976, 256886.5096, 1.886, 135.5301, 0.747, 0.3614, 71.2771] 
cluster3_mean_k3 = [58.2201, 0.6214, 472.6214, 0.835, 39.7282, 0.3301, 271749.263, 1.2117, 136.7282, 0.3689, 0.0583, 145.835]

k3_clusters_centroid = []
k3_clusters_centroid.append(cluster1_mean_k3)
k3_clusters_centroid.append(cluster2_mean_k3)
k3_clusters_centroid.append(cluster3_mean_k3)

#k3 cohesion prototype
k3_cohesion_prototype = cohesion_prototype_calculate(k3_clusters_data, k3_clusters_centroid)
print("k3 cohesion prototype: ", k3_cohesion_prototype)

#k3 cohesion graph
k3_cohesion_graph = cohesion_graph(k3_clusters_data)
print("k3 cohesion graph: ", k3_cohesion_graph)


#k3 separation protoype
k3_m_numpy = data.mean(axis=0).to_numpy()
k3_separtion_prototype = separation_prototype_calculate(3,  k3_m_numpy, k3_clusters_data)
print("k3 separation prototype:", k3_separtion_prototype)

#k3 separation graph
k3_separation_graph = separation_graph(k3_clusters_data)
print("k3 separation graph:", k3_separation_graph)

#k=4
data = pd.read_csv("heart_failure_clinical_records_dataset_with_four_clusters.csv")
del data["DEATH_EVENT"]

cluster1_data = data[data["cluster"] == "cluster1"]
del cluster1_data["cluster"]

cluster2_data = data[data["cluster"] == "cluster2"]
del cluster2_data["cluster"]

cluster3_data = data[data["cluster"] == "cluster3"]
del cluster3_data["cluster"]

cluster4_data = data[data["cluster"] == "cluster4"]
del cluster4_data["cluster"]

cluster1_mean_k4 = [60.8592, 0.4507, 481.6197, 0.0, 40.8873, 0.4366, 258790.8194, 1.1859, 137.7042, 0.493, 0.0141, 154.1831] 
cluster2_mean_k4 = [66.5132, 0.4211, 666.5, 0.2632, 33.1316, 0.3947, 255471.8979, 1.8238, 135.5658, 0.7895, 0.3947, 68.2105]  
cluster3_mean_k4 = [57.9004, 0.4943, 556.2069, 1.0, 39.3793, 0.3333, 274534.852, 1.3444, 136.2069, 0.3908, 0.0, 143.2644]       
cluster4_mean_k4 = [57.9004, 0.4943, 556.2069, 1.0, 39.3793, 0.3333, 274534.852, 1.3444, 136.2069, 0.3908, 0.0, 143.2644] 

k4_clusters_data = []
k4_clusters_data.append(cluster1_data)
k4_clusters_data.append(cluster2_data)
k4_clusters_data.append(cluster3_data)
k4_clusters_data.append(cluster4_data)


k4_clusters_centroid = []
k4_clusters_centroid.append(cluster1_mean_k4)
k4_clusters_centroid.append(cluster2_mean_k4)
k4_clusters_centroid.append(cluster3_mean_k4)
k4_clusters_centroid.append(cluster4_mean_k4)

#k4 cohesion prototype
k4_cohesion_prototype = cohesion_prototype_calculate(k4_clusters_data, k4_clusters_centroid)
print("k4 cohesion prototype: ", k4_cohesion_prototype)

#k4 cohesion graph
k4_cohesion_graph = cohesion_graph(k4_clusters_data)
print("k4 cohesion graph: ", k4_cohesion_graph)


#k4 separation protoype
k4_m_numpy = data.mean(axis=0).to_numpy()
k4_separtion_prototype = separation_prototype_calculate(3,  k4_m_numpy, k4_clusters_data)
print("k4 separation prototype:", k4_separtion_prototype)

#k4 separation graph
k4_separation_graph = separation_graph(k4_clusters_data)
print("k4 separation graph:", k4_separation_graph)